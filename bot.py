import sqlite3
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ChatType, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton
import logging
import re
import os

# –ü–æ–ª—É—á–µ–Ω–∏–µ API_TOKEN –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Docker)
API_TOKEN = os.environ['API_TOKEN']

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect("/app/data/roles.db")
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS roles (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id INTEGER,
        name TEXT,
        UNIQUE(chat_id, name)
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS role_users (
        role_id INTEGER,
        user_id INTEGER,
        username TEXT,
        UNIQUE(role_id, user_id)
    )
''')
conn.commit()

# --- –•–µ–ª–ø–µ—Ä—ã ---
def get_role_id(chat_id, role_name):
    cursor.execute("SELECT id FROM roles WHERE chat_id = ? AND name = ?", (chat_id, role_name))
    row = cursor.fetchone()
    return row[0] if row else None

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message_handler(commands=['start', 'help'])
async def show_help(message: types.Message):
    help_text = (
        "üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/add_role &quot;—Ä–æ–ª—å&quot; ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–æ–ª—å\n"
        "/roles ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–æ–ª–µ–π –≤ —á–∞—Ç–µ\n"
        "/join &quot;—Ä–æ–ª—å&quot; ‚Äî –≤—Å—Ç—É–ø–∏—Ç—å –≤ —Ä–æ–ª—å\n"
        "/leave &quot;—Ä–æ–ª—å&quot; ‚Äî –≤—ã–π—Ç–∏ –∏–∑ —Ä–æ–ª–∏\n"
        "/list_role &quot;—Ä–æ–ª—å&quot; ‚Äî –∫—Ç–æ –≤ —Ä–æ–ª–∏\n"
        "/notify &quot;—Ä–æ–ª—å&quot; —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–ª–∏\n"
        "/my_roles ‚Äî –º–æ–∏ —Ä–æ–ª–∏"
    )
    await message.reply(help_text, parse_mode="HTML")

@dp.message_handler(commands=['add_role'])
async def add_role(message: types.Message):
    role = message.get_args().strip()
    if not role:
        return await message.reply("‚ö†Ô∏è –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏: /add_role –¥–∏–∑–∞–π–Ω–µ—Ä—ã")

    try:
        cursor.execute("INSERT INTO roles (chat_id, name) VALUES (?, ?)", (message.chat.id, role))
        conn.commit()
        await message.reply(f"‚úÖ –†–æ–ª—å '{role}' —Å–æ–∑–¥–∞–Ω–∞.")
    except sqlite3.IntegrityError:
        await message.reply("‚ö†Ô∏è –¢–∞–∫–∞—è —Ä–æ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

@dp.message_handler(commands=['roles'])
async def list_roles(message: types.Message):
    chat_id = message.chat.id
    cursor.execute("SELECT name FROM roles WHERE chat_id = ? ORDER BY name", (chat_id,))
    roles = cursor.fetchall()
    if not roles:
        return await message.reply("üì≠ –í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â—ë –Ω–µ—Ç —Ä–æ–ª–µ–π.")

    keyboard = InlineKeyboardMarkup(row_width=2)
    for (role_name,) in roles:
        keyboard.add(
            InlineKeyboardButton(f"‚úÖ –í—Å—Ç—É–ø–∏—Ç—å: {role_name}", callback_data=f"join:{role_name}"),
            InlineKeyboardButton(f"üö™ –í—ã–π—Ç–∏: {role_name}", callback_data=f"leave:{role_name}")
        )

    await message.reply("üìÉ –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("join:") or c.data.startswith("leave:"))
async def handle_role_buttons(callback_query: types.CallbackQuery):
    action, role = callback_query.data.split(":", 1)
    chat_id = callback_query.message.chat.id
    user = callback_query.from_user
    role_id = get_role_id(chat_id, role)

    if not role_id:
        return await callback_query.answer("–¢–∞–∫–æ–π —Ä–æ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", show_alert=True)

    if action == "join":
        cursor.execute("INSERT OR IGNORE INTO role_users (role_id, user_id, username) VALUES (?, ?, ?)",
                       (role_id, user.id, user.username or ""))
        conn.commit()
        await callback_query.answer(f"–¢—ã –≤—Å—Ç—É–ø–∏–ª –≤ —Ä–æ–ª—å '{role}' ‚úÖ")
    elif action == "leave":
        cursor.execute("DELETE FROM role_users WHERE role_id = ? AND user_id = ?", (role_id, user.id))
        conn.commit()
        await callback_query.answer(f"–¢—ã –ø–æ–∫–∏–Ω—É–ª —Ä–æ–ª—å '{role}' üö™")

@dp.message_handler(commands=['join'])
async def join_role(message: types.Message):
    role = message.get_args().strip()
    if not role:
        return await message.reply("‚ö†Ô∏è –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏: /join –¥–∏–∑–∞–π–Ω–µ—Ä—ã")

    role_id = get_role_id(message.chat.id, role)
    if not role_id:
        return await message.reply("‚ö†Ô∏è –¢–∞–∫–æ–π —Ä–æ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

    user = message.from_user
    cursor.execute("INSERT OR IGNORE INTO role_users (role_id, user_id, username) VALUES (?, ?, ?)",
                   (role_id, user.id, user.username or ""))
    conn.commit()
    await message.reply(f"‚úÖ –¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–æ–ª—å '{role}'.")

@dp.message_handler(commands=['leave'])
async def leave_role(message: types.Message):
    role = message.get_args().strip()
    if not role:
        return await message.reply("‚ö†Ô∏è –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏: /leave –¥–∏–∑–∞–π–Ω–µ—Ä—ã")

    role_id = get_role_id(message.chat.id, role)
    if not role_id:
        return await message.reply("‚ö†Ô∏è –¢–∞–∫–æ–π —Ä–æ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

    cursor.execute("DELETE FROM role_users WHERE role_id = ? AND user_id = ?", (role_id, message.from_user.id))
    conn.commit()
    await message.reply(f"üö™ –¢—ã –ø–æ–∫–∏–Ω—É–ª —Ä–æ–ª—å '{role}'.")

@dp.message_handler(commands=['list_role'])
async def list_role(message: types.Message):
    role = message.get_args().strip()
    role_id = get_role_id(message.chat.id, role)
    if not role_id:
        return await message.reply("‚ö†Ô∏è –¢–∞–∫–æ–π —Ä–æ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

    cursor.execute("SELECT username FROM role_users WHERE role_id = ?", (role_id,))
    users = cursor.fetchall()
    if not users:
        return await message.reply(f"üì≠ –í —Ä–æ–ª–∏ '{role}' –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.")

    user_list = ', '.join([f"@{u[0]}" for u in users if u[0]])
    await message.reply(f"üë• –í —Ä–æ–ª–∏ '{role}': {user_list}")

@dp.message_handler(commands=['notify'])
async def notify(message: types.Message):
    args = message.get_args()
    if not args:
        return await message.reply("‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä: /notify –¥–∏–∑–∞–π–Ω–µ—Ä—ã –°–æ–±—Ä–∞–Ω–∏–µ –≤ 18:00")

    parts = args.split(maxsplit=1)
    if len(parts) < 2:
        return await message.reply("‚ö†Ô∏è –£–∫–∞–∂–∏ —Ä–æ–ª—å –∏ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: /notify —Ä–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ")

    role, text = parts
    role_id = get_role_id(message.chat.id, role)
    if not role_id:
        return await message.reply("‚ö†Ô∏è –¢–∞–∫–æ–π —Ä–æ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

    cursor.execute("SELECT username FROM role_users WHERE role_id = ?", (role_id,))
    users = cursor.fetchall()
    if not users:
        return await message.reply("üì≠ –í —ç—Ç–æ–π —Ä–æ–ª–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    mentions = ' '.join([f"@{u[0]}" for u in users if u[0]])
    await message.reply(f"üì¢ {text}\n\n{mentions}")

@dp.message_handler(commands=['my_roles'])
async def my_roles(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    cursor.execute('''
        SELECT roles.name FROM roles
        JOIN role_users ON roles.id = role_users.role_id
        WHERE role_users.user_id = ? AND roles.chat_id = ?
    ''', (user_id, chat_id))
    roles = cursor.fetchall()
    if not roles:
        await message.reply("ü§∑ –¢—ã –ø–æ–∫–∞ –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –Ω–∏ –≤ –æ–¥–Ω–æ–π —Ä–æ–ª–∏.")
    else:
        role_list = ', '.join([r[0] for r in roles])
        await message.reply(f"üé≠ –¢—ã –≤ —Ä–æ–ª—è—Ö: {role_list}")

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ ---
async def on_startup(dp):
    await bot.set_my_commands([
        BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
        BotCommand("add_role", "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–æ–ª—å"),
        BotCommand("roles", "–°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π"),
        BotCommand("join", "–í—Å—Ç—É–ø–∏—Ç—å –≤ —Ä–æ–ª—å"),
        BotCommand("leave", "–í—ã–π—Ç–∏ –∏–∑ —Ä–æ–ª–∏"),
        BotCommand("list_role", "–ö—Ç–æ –≤ —Ä–æ–ª–∏"),
        BotCommand("notify", "–û–ø–æ–≤–µ—Å—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–ª–∏"),
        BotCommand("my_roles", "–ú–æ–∏ —Ä–æ–ª–∏")
    ])

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
